import java.util.*;
public class Solution {
	static int calc_length(int i, int N, int price[], int [][]dp){
		if(i == 0){
			return N*price[0];
		}
		if(dp[i][N] != -1)
			return dp[i][N];
		int n_pick = 0+ calc_length(i-1, N, price, dp);
		int pick = Integer.MIN_VALUE;
		int rod_lenth = i+1;
		if(rod_lenth <= N){
			pick = price[i] + calc_length(i, N - rod_lenth, price, dp);
		}
		return dp[i][N] = Math.max(n_pick, pick);
	}
	public static int cutRod(int price[], int n) {
		// Write your code here.
		int [][]dp = new int[n][n+1];
		for(int rows[]:dp)
			Arrays.fill(rows,-1);
		return calc_length(n-1, n, price, dp);
	}
}
