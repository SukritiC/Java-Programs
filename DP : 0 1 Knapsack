import java.util.* ;
import java.io.*; 

public class Solution{
    static int check(int i, int weight, int []w, int []val, int [][]dp){
        if(i == 0){
        if(w[0] <=weight) return val[0];
        else return 0;
    }
        if(dp[i][weight] != -1)
            return dp[i][weight];
        int not_take = 0 + check(i-1, weight, w, val, dp);
        int take = Integer.MIN_VALUE;
        if(weight >= w[i])
            take = val[i] + check(i-1, weight - w[i], w, val, dp);
        
        return dp[i][weight] = Math.max(take,not_take);
    }
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            /* Your class should be named Solution
            * Don't write main().
            * Don't read input, it is passed as function argument.
            * Change in the given tree itself.
            * No need to return or print the output.
            * Taking input and printing output is handled automatically.
            */
            int dp[][] = new int[n][maxWeight+1];
            for(int a[]:dp)
                Arrays.fill(a,-1);
            return check(n-1, maxWeight, weight, value, dp);
        
    }
}
