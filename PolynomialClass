Question :-
Implement a polynomial class, that contains following functions -
1. setCoefficient -
This function sets coefficient for a particular degree value. If term with given degree is not there in the polynomial, then corresponding term (with specified degree and value) is added. If the term is already present in the polynomial, then previous coefficient value is replaced by given coefficient value
2. add -
Adds two polynomials and returns a new polynomial which has result
3. subtract -
Subtracts two polynomials and returns a new polynomial which has result
4. print -
Prints all the terms (only terms with non zero coefficients are to be printed) in increasing order of degree. **

Solution

/* Signature of four required functions is given in the code. You can create other functions as well if you need.
*  Also you should submit your code even if you are not done with all the functions. 
*/

// Main used internally is shown here just for your reference.
/*public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		int n = s.nextInt();
		int degree1[] = new int[n];
		for(int i = 0; i < n; i++){
			degree1[i] = s.nextInt();
		}
		int coeff1[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff1[i] = s.nextInt();
		}
		Polynomial first = new Polynomial();
		for(int i = 0; i < n; i++){
			first.setCoefficient(degree1[i],coeff1[i]);
		}
		n = s.nextInt();
		int degree2[] = new int[n];
		for(int i = 0; i < n; i++){
			degree2[i] = s.nextInt();
		}
		 int coeff2[] = new int[n];
		for(int i = 0; i < n; i++){
			coeff2[i] = s.nextInt();
		}
		Polynomial second = new Polynomial();
		for(int i = 0; i < n; i++){
			second.setCoefficient(degree2[i],coeff2[i]);
		}
		int choice = s.nextInt();
		Polynomial result;
		switch(choice){
		// Add
		case 1: 
			 result = first.add(second);
			result.print();
			break;
		// Subtract	
		case 2 :
			 result = first.subtract(second);
			result.print();
			break;
		// Multiply
		case 3 :
			 result = first.multiply(second);
			result.print();
			break;
		}

	}
  */


public class Polynomial {

	
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
    //private int deg
    private int coe[];
   // private int next;
    Polynomial(){
       // deg=0;
        coe=new int[5];
        //next=0;
    }
    Polynomial(int n){
        coe=new int[n];
    }
	public void setCoefficient(int degree, int coeff){
		if(degree<coe.length){
            coe[degree]=coeff;
        }else{
            restructure(degree,coeff);
        }
		
	}
    void restructure(int deg,int coef){
        int temp[]=coe;
        coe=new int[deg+1];
        for(int i=0;i<temp.length;i++){
            coe[i]=temp[i];
        }
        coe[deg]=coef;
    }
	
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree. 
	public void print(){
		for(int i=0;i<coe.length;i++){
            if(coe[i]!=0){
                System.out.print(coe[i]+"x"+i+" ");
            }
        }
        System.out.println(); 
	}

	
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){
		int l1=(this.coe).length;
        int l2=(p.coe).length;
        int n=Math.max(l1,l2);
        int a,b;
        Polynomial p1=new Polynomial(n);
        for(int i=0;i<n;i++){
            if(i>=l1){
                a=0;
                b=p.coe[i];
            }else if(i>=l2){
                b=0;
                a=this.coe[i];
            }else{
                a=this.coe[i];
                b=p.coe[i];
            }
            p1.coe[i]=a+b;
        }
        
        return p1;
		
	}
	
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
		int l1=(this.coe).length;
        int l2=(p.coe).length;
        int n=Math.max(l1,l2);
        int a,b;
        Polynomial p1=new Polynomial(n);
        for(int i=0;i<n;i++){
            if(i>=l1){
                a=0;
                b=p.coe[i];
            }else if(i>=l2){
                b=0;
                a=this.coe[i];
            }else{
                a=this.coe[i];
                b=p.coe[i];
            }
            p1.coe[i]=a-b;
        }
        
        return p1;
	}
	
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
		int l1=(this.coe).length;
        int l2=(p.coe).length;
        Polynomial p1=new Polynomial(l1+l2);
        for(int i=0;i<(p1.coe.length);i++){
            p1.coe[i]=0;
        }
        for(int i=0;i<l1;i++){
            int a=this.coe[i];
            for(int j=0;j<l2;j++){
                int b=p.coe[j];
                p1.coe[i+j]+=a*b;
            }
        }
        
        //p1.coe=this.coe;
        return p1;
	}

}
