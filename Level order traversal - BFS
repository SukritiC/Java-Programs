/* Breadth First Search - Level Order Traversal*/

import java.util.*;
class TreeNode{
int data;
TreeNode left;
TreeNode right;
TreeNode(){}
TreeNode(int data){this.data = data;}
TreeNode(int data, TreeNode left, TreeNode right){
	this.data = data;
	this.left = left;
	this.right = right;
	}
}
public class Solution{
    public List<List<Integer>> levelOrder(TreeNode root){
    	Queue<TreeNode> queue = new LinkedList<TreeNode>();
    	List<List<Integer>> wList = new LinkedList<List<Integer>>();
    	if (root == null)
    		return wList;
    	queue.offer(root);
    	while(!queue.isEmpty()){
    		int levelnum = queue.size();
    		List<Integer> subList = new LinkedList<Integer>();
    		for(int i=0;i<levelnum;i++){
    			if(queue.peek().left != null)
    				queue.offer(queue.peek().left);
    			if(queue.peek().right != null)
    				queue.offer(queue.peek().right);
    			subList.add(queue.poll().data);			
    		}
    		wList.add(subList);		
    	}
    	return wList;
    }
    public static void main(String ar[]){
    	TreeNode root = new TreeNode(1);
    	root.left = new TreeNode(2);
    	root.right = new TreeNode(3);
    	root.left.left = new TreeNode(4);
    	root.left.right = new TreeNode(5);
    	root.right.left = new TreeNode(6);
    	root.right.right = new TreeNode(7);
    	List<List<Integer>> answer = new Solution().levelOrder(root);
    	for(List<Integer> ans:answer){
    		for(Integer a:ans){
    			System.out.print(a+" ");	
    		}		
    	}
    }
}
