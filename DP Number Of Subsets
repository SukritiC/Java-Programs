import java.util.* ;
import java.io.*; 
public class Solution {
    static int count_subset(int i, int sum, int[] arr, int[][] dp){
        
        if(i == 0){
            if (sum ==0 && arr[0] == 0)
                return 2;
            if (sum == 0 || sum == arr[0])
                return 1;
            return 0;
        }
            
        if (dp[i][sum] != -1)
            return dp[i][sum];
        int n_pick = count_subset(i-1,sum,arr,dp);
        int pick = 0;
        if(arr[i] <= sum)
            pick = count_subset(i-1, sum - arr[i], arr,dp);
            
        return dp[i][sum] = pick+n_pick;
    }
    public static int findWays(int num[], int tar) {
        // Write your code here..
        int n = num.length;
        int [][]dp = new int[n][tar+1];
        for(int row[]:dp)
            Arrays.fill(row, -1);
        return count_subset(n-1, tar, num, dp);

    }
}
